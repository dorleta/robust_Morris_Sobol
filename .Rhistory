p <- ggplot(datE, aes(x=factor(Year), y= evis.rat)) +
geom_points()
p
p <- ggplot(datE, aes(x=factor(Year), y= evis.rat)) +
geom_point()
p
datE
p <- ggplot(datE, aes(x=totL, y= evis.rat, group = Year, colour = Year)) +
geom_point()
p
p <- ggplot(datE, aes(x=TotL, y= evis.rat, group = Year, colour = Year)) +
geom_point()
p
p <- ggplot(datE, aes(x=TotL, y= evis.rat, group = factor(Year), colour = factor(Year))) +
geom_point()
p
p <- ggplot(datE, aes(x=Year, y= evis.rat)) +
geom_boxplot(notch=TRUE)
p
p <- ggplot(datE, aes(x=factor(Year), y= evis.rat)) +
geom_boxplot(notch=TRUE)
p
p <- ggplot(datE, aes(x=factor(Year), y= evis.rat)) +
geom_boxplot(notch=TRUE) + geom_line(horizontal = mean(datE$evis.rat))
p
p <- ggplot(datE, aes(x=factor(Year), y= evis.rat)) +
geom_boxplot(notch=TRUE) + geom_hline(yintercept =  = mean(datE$evis.rat))
p <- ggplot(datE, aes(x=factor(Year), y= evis.rat)) +
geom_boxplot(notch=TRUE) + geom_hline(yintercept = mean(datE$evis.rat))
p
p <- ggplot(datE, aes(x=factor(Year), y= evis.rat)) +
geom_boxplot(notch=TRUE) + geom_hline(yintercept = median(datE$evis.rat), colour = 2)
p
datE %>% group_by(Year) %>% mutate(med.evis.rat = median(evis.rat))
datE <- datE %>% group_by(Year) %>% mutate(med.evis.rat = median(evis.rat))
datE[,c('Year', 'evis.rat')]
datE[,c('Year', 'evis.rat', 'Med.evis.rat')]
datE[,c('Year', 'evis.rat', 'med.evis.rat')]
headtail(datE[,c('Year', 'evis.rat', 'med.evis.rat')])
names(datE)
dat <- left_join(dat, datE[,c('Year', 'med.evis.rat')], by = 'Year')
data <- left_join(data, datE[,c('Year', 'med.evis.rat')], by = 'Year')
aa <- datE[,c('Year', 'med.evis.rat')]
aa
data <- data %>% filter(TotWE/TotW < 1) %>% group_by(Year) %>% mutate(med.evis.rat = median(evis.rat, na.rm=T))
data <- data %>% filter(TotWE/TotW < 1) %>% group_by(Year) %>% mutate(med.evis.rat = median(TotWE/TotW, na.rm=T))
aa <- data[,c('Year', 'med.evis.rat')]
aa
head(tail(aa))
data <- data %>% mutate(pW = TotW/med.evis.rat)
names(data)
ggplot(data, aes(x = TotL, y = pW))
ggplot(data, aes(x = TotL, y = pW)) + geom_point(color = Year)
ggplot(data, aes(x = TotL, y = pW)) + geom_point(data,color = Year)
ggplot(data, aes(x = TotL, y = pW)) + geom_point(data,aes(color = Year))
ggplot(data, aes(x = TotL, y = pW, color = Year)) + geom_point(data
)
ggplot(data, aes(x = TotL, y = pW, color = Year)) + geom_point()
ggplot(data, aes(x = TotL, y = pW, color = Factor(Year)) + geom_point()
ggplot(data, aes(x = TotL, y = pW, color = Factor(Year))) + geom_point()
ggplot(data, aes(x = TotL, y = pW, color = factor(Year))) + geom_point()
data <- data %>% group_by(Year) %>% mutate( a = coef(lm(log(pW) ~ log(TotL)))[1], b = coef(lm(log(pW) ~ log(TotL)))[1])
headtail(data)
data <- data %>% group_by(Year) %>% mutate( a = coef(lm(log(pW) ~ log(TotL)))[1], b = coef(lm(log(pW) ~ log(TotL)))[2])
headtail(data)
data <- data %>% group_by(Year) %>% mutate( a = exp(coef(lm(log(pW) ~ log(TotL)))[1]), b = coef(lm(log(pW) ~ log(TotL)))[2])
data
headtail(data)
data %>% group_by(Year) %>% summarise(data, a = mean(a))
data %>% group_by(Year) %>% summarise(a = mean(a))
data %>% group_by(Year) %>% summarise(a = a, b = b)
data %>% group_by(Year) %>% summarise(a = mean(a), b = b)
data %>% group_by(Year) %>% summarise(a = first(a), b = first(b))
data <- data %>% group_by(Year) %>% mutate( a.fb = mean(pW/TotL))
data %>% group_by(Year) %>% summarise(a = first(a), b = first(b), a.fb = first(a.fb))
data <- data %>% group_by(Year) %>% mutate( a.fb = mean(pW/TotL^3.05))
data %>% group_by(Year) %>% summarise(a = first(a), b = first(b), a.fb = first(a.fb))
data$a*l^data$b
l <- sep(0,130, 1)
l <- seq(0,130, 1)
data$a*l^data$b
data$a*(l^data$b)
params <- data %>% group_by(Year) %>% summarise(a = first(a), b = first(b), a.fb = first(a.fb))
params %>% group_by(Year) %>% mutate(W = a*l^b)
l <- seq(0,130, 1)
w <- NULL
for(yr in 1:16) w <- rbind(w,params[yr,'a']*l^params[yr,'b'])
w
w
l
params[yr,'b']
params[yr,'a']*l^params[yr,'b']
c(params[yr,'a'])*l^c(params[yr,'b'])
params[yr,'b']*2
l^c(params[yr,'b'])
l^params[yr,'b']
params[yr,'b']
params[yr,'b']*l[1]
params[yr,'b']*l[2]
as.numeric(params[yr,'b'])*
as.numeric(params[yr,'b'])
as.numeric(params[yr,'b']*l)
l
as.numeric(params[yr,'b'])*l
for(yr in 1:16) w <- rbind(w,as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b']))
matplot(l,w)
matplot(l,t(w))
dim(w)
w <- NULL
for(yr in 1:16) w <- rbind(w,as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b']))
w
matplot(l,w)
matplot(l,t(w))
matplot(l,t(w), type = 'l')
w
w <- data.frame(year = rep(2003:2018, each = 131), length = rep(l, 16), w = NA )
l <- seq(0,130, 1)
w <- data.frame(year = rep(2003:2018, each = 131), length = rep(l, 16), w = NA, w.fb = NA )
for(yr in 1:16){
w[w$year == yr, 'w'] <- rbind(w,as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b']))
w[w$year == yr, 'w.fb'] <- rbind(w,as.numeric(params[yr,'a.fb'])*l^3.05)
}
w[w$year == yr, 'w'] <- rbind(w,as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b']))
rbind(w,as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b']))
as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b'])
w[w$year == yr, 'w']    <- as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b'])
w[w$year == yr, 'w.fb'] <- as.numeric(params[yr,'a.fb'])*l^3.05
w
l <- seq(0,130, 1)
w <- data.frame(year = rep(2003:2018, each = 131), length = rep(l, 16), w = NA, w.fb = NA )
for(yr in 1:16){
w[w$year == yr, 'w']    <- as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b'])
w[w$year == yr, 'w.fb'] <- as.numeric(params[yr,'a.fb'])*l^3.05
}
w
as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b'])
w[w$year == yr, 'w']
l <- seq(0,130, 1)
w <- data.frame(year = rep(2003:2018, each = 131), length = rep(l, 16), w = NA, w.fb = NA )
for(yr in 2003:2018){
w[w$year == yr, 'w']    <- as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b'])
w[w$year == yr, 'w.fb'] <- as.numeric(params[yr,'a.fb'])*l^3.05
}
ggplot(w, aes(l,w, group = year, colour = year)) + geom_line()
l <- seq(0,130, 1)
LW <- data.frame(year = rep(2003:2018, each = 131), length = rep(l, 16), w = NA, w.fb = NA )
for(yr in 2003:2018){
LW[LW$year == yr, 'w']    <- as.numeric(params[yr,'a'])*l^as.numeric(params[yr,'b'])
LW[LW$year == yr, 'w.fb'] <- as.numeric(params[yr,'a.fb'])*l^3.05
}
ggplot(LW, aes(l,w, group = year, colour = year)) + geom_line()
head(LW)
LW[LW$year == yr, 'w']
l <- seq(0,130, 1)
LW <- data.frame(year = rep(2003:2018, each = 131), length = rep(l, 16), w = NA, w.fb = NA )
for(yr in 2003:2018){
LW[LW$year == yr, 'w']    <- as.numeric(params[yr-2002,'a'])*l^as.numeric(params[yr-2002,'b'])
LW[LW$year == yr, 'w.fb'] <- as.numeric(params[yr-2002,'a.fb'])*l^3.05
}
ggplot(LW, aes(l,w, group = year, colour = year)) + geom_line()
as.numeric(params[yr-2002,'a'])*l^as.numeric(params[yr-2002,'b'])
LW
head(LW)
ggplot(LW, aes(length,w, group = year, colour = year)) + geom_line()
ggplot(LW, aes(length,w, group = factor(year), colour = year)) + geom_line()
ggplot(LW, aes(length,w, group = factor(year), colour = factor(year)) + geom_line()
ggplot(LW, aes(length,w, group = factor(year), colour = factor(year))) + geom_line()
l <- seq(0,80, 1)
LW <- data.frame(year = rep(2003:2018, each = 80), length = rep(l, 16), w = NA, w.fb = NA )
for(yr in 2003:2018){
LW[LW$year == yr, 'w']    <- as.numeric(params[yr-2002,'a'])*l^as.numeric(params[yr-2002,'b'])
LW[LW$year == yr, 'w.fb'] <- as.numeric(params[yr-2002,'a.fb'])*l^3.05
}
ggplot(LW, aes(length,w, group = factor(year), colour = factor(year))) + geom_line()
l <- seq(0,80, 1)
LW <- data.frame(year = rep(2003:2018, each = 81), length = rep(l, 16), w = NA, w.fb = NA )
for(yr in 2003:2018){
LW[LW$year == yr, 'w']    <- as.numeric(params[yr-2002,'a'])*l^as.numeric(params[yr-2002,'b'])
LW[LW$year == yr, 'w.fb'] <- as.numeric(params[yr-2002,'a.fb'])*l^3.05
}
ggplot(LW, aes(length,w, group = factor(year), colour = factor(year))) + geom_line()
ggplot(LW, aes(length,w.fb, group = factor(year), colour = factor(year))) + geom_line()
subset(LW, length = 80)
subset(LW, length == 80)
data <- data %>% group_by(Year) %>% mutate( a = exp(coef(lm(log(TotW) ~ log(TotL)))[1]), b = coef(lm(log(TotW) ~ log(TotL)))[2])
data %>% group_by(Year) %>% summarise(a = first(a), b = first(b))
data <- data %>% group_by(Year) %>% mutate( a.fb = mean(TotW/TotL^3.05))
params <- data %>% group_by(Year) %>% summarise(a = first(a), b = first(b), a.fb = first(a.fb))
params %>% group_by(Year) %>% mutate(W = a*l^b)
params
l <- seq(0,80, 1)
params %>% group_by(Year) %>% mutate(W = a*l^b)
LW <- data.frame(year = rep(2003:2018, each = 81), length = rep(l, 16), w = NA, w.fb = NA )
for(yr in 2003:2018){
LW[LW$year == yr, 'w']    <- as.numeric(params[yr-2002,'a'])*l^as.numeric(params[yr-2002,'b'])
LW[LW$year == yr, 'w.fb'] <- as.numeric(params[yr-2002,'a.fb'])*l^3.05
}
ggplot(LW, aes(length,w, group = factor(year), colour = factor(year))) + geom_line()
ggplot(LW, aes(length,w.fb, group = factor(year), colour = factor(year))) + geom_line()
subset(LW, length == 80)
subset(LW, length == 80)
subset(LW, length == 70)
4^135*(4-2)
110/!42
110/142
setwd("~/use/Dropbox/MixFish_IW_2019")
library(FLBEIA)
library(ggplot2)
flnms <- c("OTB", "LLS", "GNS", "GTR", "MIS", "PTB")
mtnms <- c('CRU_>=55_0_0', 'DEF_>=65_0_0', 'DEF_>=55_0_0', 'MPD_>=55_0_0', 'DEF_0_0_0', 'DEF_60-79_0_0', 'DEF_80-99_0_0',
'DEF_>=100_0_0', 'MCD_>=55_0_0', 'MIS_0_0_0_HC', 'OTH')
##------------------------------------------------------------------------##
# Effort Data
##------------------------------------------------------------------------##
eff_csv <- dir('./input', pattern = 'effort')
getwd()
setwd("~/Dropbox/MixFish_IW_2019")
install.packages("devtools")
install_github
library(Devtools)
library(devtools)
install_github('FLR/FLBEIA')
install_github('FLR/FLCore')
library(FLCore)
library(FLFleet)
library(FLXSA)
install_github('FLR/FLAssess')
library(devtools)
install_github('FLR/FLAssess')
install_github('FLR/FLAssess')
install_github('FLR/FLAssess')
Sys.setenv(REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE)
install_github('FLR/FLAssess')
Sys.setenv(REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE)
?Sys.setenv
Sys.setenv()
Sys.setenv
Sys.setenv(REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE)
library(devtools)
install_github('FLR/FLAssess')
library(FLCore)
data("ple4")
stck <- ple4
dimnames(stck) <- list(unit="unique", season="all")
dimnames(stck)
stck <- ple4
dimnames(stck)
dimnames(stck) <- list(unit="ooo", season="aaaa")
dimnames(stck)
dimnames(stck) <- list(unit="unique", season="all")
dimnames(stck)
library(FLBEIA)
create.ecoData
library(FLBEIA)
fltSum
pp
#--------------------------------------------------------------------------------------
#  Implementation of the Selection and Convergence Criterion defined in :
#
#        "Robust combination of the Morris and Sobol methods
#             in complex multidimensional models"
#
#  Submitted to Environmental Modelling & Software.
#
#  What it is needed to run this script:
#
#
#
#
# Dorleta Garcia, Inmaculada Arostegui and Raul Prellezo
# 2019/08/01
#--------------------------------------------------------------------------------------
# load(file = './output/Morris_For_Selection_Criteria.RData')
# AEE <- subset(res, stat == 'mean' & indicator %in% c('catch', 'rec', 'ssb', 'f', 'tac'))
# names(AEE)[c(4,6)] <- c('stock', 'AEE')
# AEE <- cbind(AEE, outVar = paste(AEE$indicator, AEE$stock, sep = "_"))
#
# AEE <- AEE[, c(3,1,7,2)]
# names(AEE)[c(4)] <- c('AEE')
# save(AEE, file = 'C:/Users/dgarcia/Dropbox/PhD_Dorleta/Papers/3_GSA_MethodOnly/revision_EMS/Algorithm/AEE.RData')
# load ggplot2 library to build the barplots with the absolute elementary effects per output variable.
library(ggplot2)
# Set the working directory
wd <- "C:/Users/dgarcia/Dropbox/PhD_Dorleta/Papers/3_GSA_MethodOnly/revision_EMS/Algorithm/"
setwd(wd)
# Read the functions to with the selection and convergence criteria
source('./Garcia_2019_Selection_&_Convergence_Criteria_Functions.R')
#----------------------------------------------------------------------------------------------------
files <- c("morris_25_convergence.RData", "morris_50_convergence.RData", "morris_100_convergence.RData",
"morris_150_convergence.RData", "morris_200_convergence.RData", "morris_250_convergence.RData",
"morris_300_convergence.RData")
k <- 1
pp <- c(25, 50, 100, 150, 200, 250, 300)
files
pp
k
load(paste('C:/use/OneDrive - AZTI/Tesia/Sensitivity Analysis/output/', f, sep = ""))
f <- files[1]
load(paste('C:/use/OneDrive - AZTI/Tesia/Sensitivity Analysis/output/', f, sep = ""))
pp[k]
k
files <- c("morris_25_convergence.RData", "morris_50_convergence.RData", "morris_100_convergence.RData",
"morris_150_convergence.RData", "morris_200_convergence.RData", "morris_250_convergence.RData",
"morris_300_convergence.RData")
kkk <- 1
pp <- c(25, 50, 100, 150, 200, 250, 300)
for(f in files){
load(paste('C:/use/OneDrive - AZTI/Tesia/Sensitivity Analysis/output/', f, sep = ""))
save(bootmorris, file = paste('AEE_Boot_', pp[kkk], '.RData'))
kkk <- kkk+1
}
setwd("~/GitHub/robust_Morris_Sobol/shiny")
library(shiny); source('RunApp.R')
install.packages("shinyBS")
source('RunApp.R')
ls()
save.image('shinyDat.RData')
source('RunApp.R')
head(bootmorris)
getwd()
load("~/GitHub/robust_Morris_Sobol/example/AEE_Boot_ 25 .RData")
head(bootmorris)
bootmorris <- cbind(bootmorris, outVar = paste(bootmorris$indicator, bootmorris$unit, sep = "_"))
bootmorris <- subset(bootmorris, stat == 'mean')
head(bootmorris)
bootmorris <- bootmorris[,c(3,1,8,2,7)]
head(bootmorris)
load("~/GitHub/robust_Morris_Sobol/example/AEE_Boot_ 25 .RData")
bootmorris <- cbind(bootmorris, outVar = paste(bootmorris$indicator, bootmorris$unit, sep = "_"))
bootmorris <- subset(bootmorris, stat == 'mean')
names(bootmorris)[2] <- AEE
bootmorris <- bootmorris[,c(3,1,8,2,7)]
load("~/GitHub/robust_Morris_Sobol/example/AEE_Boot_ 25 .RData")
bootmorris <- cbind(bootmorris, outVar = paste(bootmorris$indicator, bootmorris$unit, sep = "_"))
bootmorris <- subset(bootmorris, stat == 'mean')
names(bootmorris)[2] <- 'AEE'
bootmorris <- bootmorris[,c(3,1,8,2,7)]
head(bootmorris)
setwd("~/GitHub/robust_Morris_Sobol/example")
#----------------------------------------------------------------------------------------------------
files <- c("morris_25_convergence.RData", "morris_50_convergence.RData", "morris_100_convergence.RData",
"morris_150_convergence.RData", "morris_200_convergence.RData", "morris_250_convergence.RData",
"morris_300_convergence.RData")
kkk <- 1
pp <- c(25, 50, 100, 150, 200, 250, 300)
for(f in files){
load(paste('C:/use/OneDrive - AZTI/Tesia/Sensitivity Analysis/output/', f, sep = ""))
bootmorris <- cbind(bootmorris, outVar = paste(bootmorris$indicator, bootmorris$unit, sep = "_"))
bootmorris <- subset(bootmorris, stat == 'mean')
names(bootmorris)[2] <- 'AEE'
bootmorris <- bootmorris[,c(3,1,8,2,7)]
save(bootmorris, file = paste('AEE_Boot_', pp[kkk], '.RData', sep = ""))
kkk <- kkk+1
}
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
# load ggplot2 library to build the barplots with the absolute elementary effects per output variable.
library(ggplot2)
# Set the working directory
wd <- "C:/use/GitHub/robust_Morris_Sobol/code"
setwd(wd)
# Read the functions to with the selection and convergence criteria
source('./code/Garcia_2019_Selection_&_Convergence_Criteria_Functions.R')
# Set the working directory
wd <- "C:/use/GitHub/robust_Morris_Sobol/"
setwd(wd)
# Read the functions to with the selection and convergence criteria
source('./code/Garcia_2019_Selection_&_Convergence_Criteria_Functions.R')
# load ggplot2 library to build the barplots with the absolute elementary effects per output variable.
library(ggplot2)
# Set the working directory
wd <- "C:/use/GitHub/robust_Morris_Sobol/"
setwd(wd)
# Read the functions to with the selection and convergence criteria
source('./code/Selection_&_Convergence_Criteria_Functions.R')
#-----
#--------------------------------------------------------------------------------------
#  Implementation of the Selection and Convergence Criterion defined in :
#
#        "Robust combination of the Morris and Sobol methods
#             in complex multidimensional models"
#
#  Submitted to Environmental Modelling & Software.
#
#  What it is needed to run this script:
#
#
#
#
# Dorleta Garcia, Inmaculada Arostegui and Raul Prellezo
# 2019/08/01
#--------------------------------------------------------------------------------------
# load ggplot2 library to build the barplots with the absolute elementary effects per output variable.
library(ggplot2)
# Set the working directory
wd <- "C:/use/GitHub/robust_Morris_Sobol/"
setwd(wd)
# Read the functions to with the selection and convergence criteria
source('./code/Selection_&_Convergence_Criteria_Functions.R')
#-----------------------------------------------------------------------------------
## K_EE: The objective number of input factors to be selected.
#-----------------------------------------------------------------------------------
K_EE <- 50
#-------------------------------------------------------------------------------------
## 1. VISUAL SELECTION
##
##      * The results of morris methods are provided in a data frame in 4 columns:
##                      c('name', 'param', 'outVar', 'AEE')
##      * First we create a set of plots to summarize the results of the application
##        of the Morris method.
##        We create one plot per output variable (outVar) with the AEE of the 50
##        input factors with the highest AEE. The plots are stored in the working
##        directory with the name 'AEE.pdf'.
##      * Based on these plots, perform a visual selection that results in the
##        selection of K_EE factors.
##
#------------------------------------------------------------------------------------
load('./example/AEE.RData')
pdf('./example/AEE.pdf')
for(id in unique(AEE$outVar)){
x1 <- subset(AEE, outVar == id)
x1 <- cbind(x1[order(x1$AEE, decreasing = TRUE),], ord = 135:1)[1:50,]
p <- ggplot(x1,aes(x = factor(ord), y = AEE)) + geom_col() + coord_flip() +
scale_x_discrete(breaks = x1$ord, labels = x1$name) +
ggtitle(id)
print(p)
}
dev.off()
# The number of factors selected in each output variable.
Fvis <- c(ssb_HKE = 5,   ssb_HOM = 6,   ssb_MEG = 5,   ssb_LDB = 5,   ssb_MON = 5,
rec_HKE = 3,   rec_HOM = 7,   rec_MEG = 6,   rec_LDB = 5,   rec_MON = 5,
f_HKE = 2,     f_HOM = 8,     f_MEG = 4,     f_LDB = 5,     f_MON = 7,
catch_HKE = 6, catch_HOM = 4, catch_MEG = 2, catch_LDB = 7, catch_MON = 3,
tac_HKE = 7,   tac_HOM = 7,   tac_MEG = 5,   tac_LDB = 5,   tac_MON = 5)
# Identify the input factor selected with Fvis.
inpFactVis <- unique(unlist(lapply(names(Fvis), function(id)
as.character(subset(AEE, outVar == id)[1:Fvis[id],'name']))))
#-------------------------------------------------------------------------------------
## 2. SELECTION CRITERION
##      * Apply the  "selection_criterion" function.
#----------------------------------------------------------------------------------------------------
FM <- selection_criterion(AEE, K_EE, Fvis)
FM$weights
args(selection_criterion_boot)
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
#   bootmorris <- cbind(bootmorris, outVar = paste(bootmorris$indicator, bootmorris$unit, sep = "_"))
#   bootmorris <- subset(bootmorris, stat == 'mean')
#   names(bootmorris)[2] <- 'AEE'
#
#   bootmorris <- bootmorris[,c(3,1,8,2,7)]
#   save(bootmorris, file = paste('AEE_Boot_', pp[kkk], '.RData', sep = ""))
#   kkk <- kkk+1
#
# }
#
load('./example/AEE_Boot_200.RData')
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
files <- c("morris_25_convergence.RData", "morris_50_convergence.RData", "morris_100_convergence.RData",
"morris_150_convergence.RData", "morris_200_convergence.RData", "morris_250_convergence.RData",
"morris_300_convergence.RData")
kkk <- 1
pp <- c(25, 50, 100, 150, 200, 250, 300)
for(f in files){
load(paste('C:/use/OneDrive - AZTI/Tesia/Sensitivity Analysis/output/', f, sep = ""))
bootmorris <- cbind(bootmorris, outVar = paste(bootmorris$indicator, bootmorris$unit, sep = "_"))
bootmorris <- subset(bootmorris, stat == 'mean')
names(bootmorris)[2] <- 'AEE'
bootmorris <- bootmorris[,c(3,1,8,2,7)]
AEEboot <- bootmorris
save(AEEboot, file = paste('AEE_Boot_', pp[kkk], '.RData', sep = ""))
kkk <- kkk+1
}
load('./example/AEE_Boot_200.RData')
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
names(AEEboot)
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
load('./example/AEE_Boot_200.RData')
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
FM$weights
names(FM)
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
#-------------------------------------------------------------------------------------
## 2. SELECTION CRITERION
##      * Apply the  "selection_criterion" function.
##      * In this step we calibrate the methos using the visual selection and obtain the weigths
##        that we will use in the bootstrap to calculate the weighted criterion.
##
#----------------------------------------------------------------------------------------------------
FM <- selection_criterion(AEE, K_EE, Fvis)
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
FM
debug(selection_criterion_boot)
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
FM$weights
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
denug(selection_criterion_boot)
debug(selection_criterion_boot)
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
FM$weights
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
weights
weights$wN
weights['wN']
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
source('~/GitHub/robust_Morris_Sobol/code/Selection_&_Convergence_Criteria_Functions.R', echo=TRUE)
res <- selection_criterion_boot(AEEboot, K_EE, FM$weights)
